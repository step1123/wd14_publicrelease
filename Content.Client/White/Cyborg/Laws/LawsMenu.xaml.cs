using Content.Client.UserInterface.Controls;
using Content.Shared.White.Cyborg.Laws.Component;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using TerraFX.Interop.Windows;

namespace Content.Client.White.Cyborg.Laws
{
    [GenerateTypedNameReferences]
    public sealed partial class LawsMenu : FancyWindow
    {
        [Dependency] private readonly IEntityManager _entityManager = default!;
        public LawsBoundUserInterface Owner { get; }
        public List<Law> StatesLaws = new();

        public LawsMenu(LawsBoundUserInterface owner)
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            Owner = owner;
            UpdateLaws();

            if (_entityManager.TryGetComponent<LawsComponent>(owner.Machine, out var laws))
                StateLawsButton.Visible = laws.CanState;

            StateLawsButton.OnPressed += _ =>
            {
                StateLaws();
            };
        }

        public void UpdateLaws()
        {
            if (!_entityManager.TryGetComponent<LawsComponent>(Owner.Machine, out var laws))
                return;
            StatesLaws = Law.Convert(laws.Laws);

            Laws.DisposeAllChildren();

            foreach (var law in StatesLaws)
            {
                var newLabel = new LawUIContainer(law);
                var heading = Loc.GetString("silicon-laws-law-heading",
                        ("lawDisplayNumber", Laws.ChildCount + 1));
                newLabel.SetHeading(heading);
                newLabel.SetDescription(law.ToString());
                Laws.AddChild(newLabel);
            }
        }

        private void StateLaws()
        {
            Owner.StateLawsMessage(Law.Convert(StatesLaws));
        }
    }

    public sealed class Law
    {
        private readonly string _lawString;
        public bool Enabled = true;

        public Law(string law)
        {
            _lawString = law;
        }

        public override string ToString()
        {
            return _lawString;
        }

        public static List<Law> Convert(List<string> laws)
        {
            List <Law> convertedLaws = new(laws.Count);
            foreach (var law in laws)
            {
                convertedLaws.Add(new Law(law));
            }

            return convertedLaws;
        }

        public static List<string> Convert(List<Law> laws)
        {
            List <string> convertedLaws = new(laws.Count);
            foreach (var law in laws)
            {
                if(law.Enabled)
                    convertedLaws.Add(law.ToString());
            }
            return convertedLaws;
        }
    }
}
