using System.Linq;
using Content.Shared.White.Jukebox;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.White.Jukebox;

[GenerateTypedNameReferences]
public sealed partial class JukeboxMenu : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    private readonly JukeboxSystem _jukeboxSystem = default!;

    private readonly JukeboxComponent _component;

    private List<JukeboxSongEntry> _defaultSongsEntries = new();
    private List<JukeboxSongEntry> _tapeSongsEntries = new();

    public JukeboxMenu(JukeboxComponent component)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _jukeboxSystem = _entityManager.System<JukeboxSystem>();

        _component = component;

        /*TabContainer.SetTabTitle(DefaultSongsTab, "Прямо с завода");*/
        TabContainer.SetTabTitle(TapeSongsTab, "Песенки с кассеты");

        /*PopulateDefaultSongsContainer(DefaultSongsContainer);*/
        PopulateTapeSongsContainer(TapeSongsContainer);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        CurrenSongLabel.Text = _component.PlayingSongData == null ? "..." : _component.PlayingSongData.SongName!;

        RepeatButton.Pressed = _component.Repeating;

        base.FrameUpdate(args);
    }

    private void PopulateDefaultSongsContainer(BoxContainer defaultSongsContainer)
    {
        var tapes = _component.DefaultSongsContainer.ContainedEntities.ToList();

        foreach (var tapeUid in tapes)
        {
            if (_entityManager.TryGetComponent<TapeComponent>(tapeUid, out var tape))
            {
                foreach (var song in tape.Songs)
                {
                    var songEntry = new JukeboxSongEntry(song, RequestSongPlay);

                    _defaultSongsEntries.Add(songEntry);
                }
            }
        }

        _defaultSongsEntries.Sort((x,y ) => string.Compare(x.Name!, y.Name!, StringComparison.Ordinal));

        foreach (var defaultSongsEntry in _defaultSongsEntries)
        {
            defaultSongsContainer.AddChild(defaultSongsEntry);
        }
    }

    private void PopulateTapeSongsContainer(BoxContainer tapeSongsContainer)
    {
        var tapes = _component.TapeContainer.ContainedEntities.ToList();

        foreach (var tapeUid in tapes)
        {
            if (_entityManager.TryGetComponent<TapeComponent>(tapeUid, out var tape))
            {
                foreach (var song in tape.Songs)
                {
                    var songEntry = new JukeboxSongEntry(song, RequestSongPlay);

                    _tapeSongsEntries.Add(songEntry);
                }
            }
        }

        foreach (var tapeSongsEntry in _tapeSongsEntries)
        {
            tapeSongsContainer.AddChild(tapeSongsEntry);
        }
    }

    private void RequestSongPlay(JukeboxSong song)
    {
        _jukeboxSystem.RequestSongToPlay(_component, song);
    }
}
